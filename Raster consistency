########### By Lucas Rodrigues 02/03/2019 ###############
########## Assert Rasters ###############################
#########################################################

library(Dinamica)
library(tidyverse)

# Create table with regions of verification
 df = data.frame(index = c("Amazonia","Catinga","Cerrado",
                           "MataAtlantica","Pampas","Pantanal"),
                 value = c(seq(1,6,1)))
# Save it
write.csv(df,"D:\\PPBio2.0\\modelos\\Dinamica-R\\biomes.csv")

# This is the DinamicaEGO code that you must load in the Dinamica EGO environment to be able to call it within R through the function system()
#located in line 226
<?xml version="1.0" standalone="yes" ?>
<script>
    <property key="dff.charset" value="windows-1252" />
    <property key="dff.date" value="2019-Apr-08 13:56:31" />
    <property key="dff.version" value="4.0.11.20181011" />
    <property key="submodel.import" value='ListFilenamesInFolder { { &quot;folder&quot; : Folder, &quot;fileExtension&quot; : String } { &quot;searchSubFoldersRecursively&quot; : BooleanValue } { &quot;files&quot; : Table } }' />
    <functor name="SaveTable">
        <property key="dff.functor.alias" value="saveTable2756" />
        <inputport name="table" peerid="v7" />
        <inputport name="filename">&quot;../table_tmp.csv&quot;</inputport>
        <inputport name="suffixDigits">2</inputport>
        <inputport name="step">.none</inputport>
        <inputport name="workdir">.none</inputport>
    </functor>
    <functor name="LoadTable">
        <property key="dff.functor.alias" value="loadTable2919" />
        <inputport name="filename">&quot;../biomes.csv&quot;</inputport>
        <inputport name="suffixDigits">0</inputport>
        <inputport name="step">.none</inputport>
        <inputport name="workdir">.none</inputport>
        <outputport name="table" id="v1" />
    </functor>
    <functor name="ExtractStructNumber">
        <property key="dff.functor.alias" value="extractStructNumber5726" />
        <property key="viewer.number" value="yes" />
        <inputport name="struct" peerid="v20" />
        <inputport name="name">&quot;a&quot;</inputport>
        <outputport name="number" id="v2" />
    </functor>
    <containerfunctor name="For">
        <property key="dff.functor.alias" value="for2849" />
        <inputport name="firstIterationStep">1</inputport>
        <inputport name="lastIterationStep" peerid="v2" />
        <inputport name="stepIncrement">1</inputport>
        <internaloutputport name="step" id="v3" />
        <functor name="ExtractStructNumber">
            <property key="dff.functor.alias" value="extractStructNumber5726" />
            <property key="viewer.number" value="yes" />
            <inputport name="struct" peerid="v18" />
            <inputport name="name">&quot;a&quot;</inputport>
            <outputport name="number" id="v4" />
        </functor>
        <functor name="Step">
            <property key="dff.functor.alias" value="step2755" />
            <inputport name="step" peerid="v3" />
            <outputport name="step" id="v5" />
        </functor>
        <functor name="MuxTable">
            <property key="dff.functor.alias" value="muxTable2862" />
            <inputport name="initial">[&#x0A;    &quot;Biome*&quot;, &quot;MapType*&quot;, &quot;Attribute*&quot;, &quot;Value&quot;, &#x0A;]</inputport>
            <inputport name="feedback" peerid="v7" />
            <outputport name="table" id="v6" />
        </functor>
        <functor name="SetTableByKey">
            <property key="dff.functor.alias" value="setTableByKey2861" />
            <inputport name="table" peerid="v6" />
            <inputport name="keys" peerid="v5" />
            <inputport name="subTable" peerid="v15" />
            <inputport name="ignoreColumnNames">.no</inputport>
            <outputport name="result" id="v7" />
        </functor>
        <functor name="GetTableValue">
            <property key="dff.functor.alias" value="getTableValue2920" />
            <property key="viewer.result" value="yes" />
            <inputport name="table" peerid="v1" />
            <inputport name="keys" peerid="v5" />
            <inputport name="column">2</inputport>
            <inputport name="valueIfNotFound">.none</inputport>
            <outputport name="result" id="v8" />
        </functor>
        <functor name="ListFilenamesInFolder">
            <property key="dff.functor.alias" value="listFilenamesInFolder2855" />
            <property key="viewer.files" value="yes" />
            <inputport name="folder" peerid="v19" />
            <inputport name="fileExtension">&quot;tif&quot;</inputport>
            <inputport name="searchSubFoldersRecursively">.no</inputport>
            <outputport name="files" id="v9" />
        </functor>
        <containerfunctor name="Repeat">
            <property key="dff.container.collapsed" value="no" />
            <property key="dff.functor.alias" value="repeat5722" />
            <inputport name="iterations" peerid="v4" />
            <internaloutputport name="step" id="v10" />
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes5999" />
                <property key="viewer.attributes" value="yes" />
                <property key="viewer.layerattributes" value="yes" />
                <inputport name="map" peerid="v17" />
                <inputport name="extractDynamicAttributes">.yes</inputport>
                <inputport name="extractStatisticalAttributes">.yes</inputport>
                <outputport name="attributes" id="v11" />
            </functor>
            <functor name="GetProjectionInfo">
                <property key="dff.functor.alias" value="getProjectionInfo2759" />
                <property key="viewer.coordinatetype" value="yes" />
                <property key="viewer.ermapperequivalentdatum" value="yes" />
                <property key="viewer.ermapperequivalentprojection" value="yes" />
                <property key="viewer.ermapperequivalentunit" value="yes" />
                <property key="viewer.proj4" value="yes" />
                <property key="viewer.utmhemisphere" value="yes" />
                <property key="viewer.utmzone" value="yes" />
                <property key="viewer.wkt" value="yes" />
                <inputport name="projection" peerid="v17" />
                <outputport name="proj4" id="v12" />
            </functor>
            <functor name="Step">
                <property key="dff.functor.alias" value="step2755" />
                <inputport name="step" peerid="v10" />
                <outputport name="step" id="v13" />
            </functor>
            <functor name="MuxTable">
                <property key="dff.functor.alias" value="muxTable2756" />
                <inputport name="initial">[&#x0A;    &quot;MapType*&quot;, &quot;Attribute*&quot;, &quot;Value&quot;, &#x0A;]</inputport>
                <inputport name="feedback" peerid="v15" />
                <outputport name="table" id="v14" />
            </functor>
            <functor name="SetTableByKey">
                <property key="dff.functor.alias" value="setTableByKey2757" />
                <property key="viewer.result" value="yes" />
                <inputport name="table" peerid="v14" />
                <inputport name="keys" peerid="v13" />
                <inputport name="subTable" peerid="v11" />
                <inputport name="ignoreColumnNames">.no</inputport>
                <outputport name="result" id="v15" />
            </functor>
            <functor name="SaveTextFile">
                <property key="dff.functor.alias" value="saveTextFile3071" />
                <inputport name="text" peerid="v12" />
                <inputport name="filename">&quot;../projecoes_tmp.txt&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v10" />
                <inputport name="workdir">.none</inputport>
            </functor>
            <containerfunctor name="Group">
                <property key="dff.functor.alias" value="Load Maps based on List" />
                <functor name="GetTableValue">
                    <property key="dff.functor.alias" value="getTableValue5778" />
                    <property key="viewer.result" value="yes" />
                    <inputport name="table" peerid="v9" />
                    <inputport name="keys" peerid="v13" />
                    <inputport name="column">2</inputport>
                    <inputport name="valueIfNotFound">.none</inputport>
                    <outputport name="result" id="v16" />
                </functor>
                <functor name="LoadMap">
                    <property key="dff.functor.alias" value="loadMap6184" />
                    <inputport name="filename" peerid="v16" />
                    <inputport name="nullValue">.none</inputport>
                    <inputport name="loadAsSparse">.no</inputport>
                    <inputport name="suffixDigits">0</inputport>
                    <inputport name="step" peerid="v10" />
                    <inputport name="workdir">.none</inputport>
                    <outputport name="map" id="v17" />
                </functor>
            </containerfunctor>
        </containerfunctor>
        <containerfunctor name="CalculateRExpression">
            <property key="dff.container.collapsed" value="no" />
            <property key="dff.functor.alias" value="List Size" />
            <inputport name="expression">&quot;a = nrow(t1)&#x0A;outputDouble(\&quot;a\&quot;,a)&quot;</inputport>
            <inputport name="treatWarningAsErrors">.no</inputport>
            <outputport name="result" id="v18" />
            <functor name="NumberTable">
                <property key="dff.functor.alias" value="numberTable5725" />
                <inputport name="table" peerid="v9" />
                <inputport name="tableNumber">1</inputport>
            </functor>
        </containerfunctor>
        <containerfunctor name="CreateString">
            <property key="dff.container.collapsed" value="no" />
            <property key="dff.functor.alias" value="createString2843" />
            <property key="viewer.result" value="yes" />
            <inputport name="format">&quot;&lt;s2&gt;&lt;s1&gt;&quot;</inputport>
            <outputport name="result" id="v19" />
            <functor name="NumberString">
                <property key="dff.functor.alias" value="numberString2987" />
                <inputport name="value" peerid="v8" />
                <inputport name="valueNumber">1</inputport>
            </functor>
            <functor name="NumberString">
                <property key="dff.functor.alias" value="numberString2810" />
                <inputport name="value" peerid="v21" />
                <inputport name="valueNumber">2</inputport>
            </functor>
        </containerfunctor>
    </containerfunctor>
    <containerfunctor name="CalculateRExpression">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="List Size" />
        <inputport name="expression">&quot;a = nrow(t1)&#x0A;outputDouble(\&quot;a\&quot;,a)&quot;</inputport>
        <inputport name="treatWarningAsErrors">.no</inputport>
        <outputport name="result" id="v20" />
        <functor name="NumberTable">
            <property key="dff.functor.alias" value="numberTable5725" />
            <inputport name="table" peerid="v1" />
            <inputport name="tableNumber">1</inputport>
        </functor>
    </containerfunctor>
    <functor name="LoadTextFile">
        <property key="dff.functor.alias" value="loadTextFile2813" />
        <inputport name="filename">&quot;../path_file_name_for_rasters_to_be_compared.txt&quot;</inputport>
        <inputport name="suffixDigits">0</inputport>
        <inputport name="step">.none</inputport>
        <inputport name="workdir">.none</inputport>
        <outputport name="text" id="v21" />
    </functor>
</script>

#Runs Dinamica EGO
system("C://Users/iis/Desktop/assert.bat")

receivedTable = read.csv("C://Users//iis/Desktop/Lucas/1-Scripts/DinamicaEGO/table.csv", header =T)

receivedTable$X = NULL

receivedTable$Names = c("Lines","Columns","Cells","Layers","Cell Height", 
                        "Cell Width", "Cell Area","Null Cell","NonNull Cell",
                        "minCell", "maxCell","Cell Sum", "MeanCell",
                        "Variance", "Std", "Mode","Median","Unique Cells",
                        "Cell Type", "NullValue","Reg.Coord Y", "Reg.Coord X",
                        "Reg.Cell Y", "Reg.Cell x", "Rotation Y", "Rotation X",
                        "OriginalCellHeight", "OriginalCellWidth")

receivedTable = receivedTable[c(1,2,3,5,4)]

assert1 = data.frame()
for (i in 1:length(unique(receivedTable$Biome.))) {
  tmp = subset(receivedTable, Biome. == i)
  tmp$Bioma = as.character(df$index[[i]])
  assert1 = rbind(assert1,tmp)

  
  
  #receivedTable = receivedTable[c(5,1,2,3,4)] # Different 
}

assert1[1] = NULL
assert1 = assert1[c(5,1,2,3,4)]

receivedTable.spread = assert1 %>%
   spread(MapType.,Value) 
 
assert = data.frame()
for (i in 1:length(unique(receivedTable.spread$Bioma))) {
 # print(i)
    
    t1 = subset(receivedTable.spread, Bioma == df$index[i] )
  
  
  t1$error = apply(t1[,-c(1,2,3)],1,function(x){
    ifelse(length(unique(x)) > 1,"sim", "não")}) 
    assert = rbind(assert,t1)
  
}

test = assert[,-c(2,5:length(assert) - 1)]
################################################################################ 
